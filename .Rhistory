f3_num <- (12* c3 %*% y_group_mean) / sum(c3^2)
f4_num <- (12* c4 %*% y_group_mean) / sum(c4^2)
f5_num <- (12* c5 %*% y_group_mean) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num / sigmasq.hat
f4 <- f4_num / sigmasq.hat
f5 <- f5_num / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
f1_num <- (12* sum((c1 %*% y_group_mean)^2)) / sum(c1^2)
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 %*% y_group_mean)^2)) / sum(c1^2)
f2_num <- (12* c2 %*% y_group_mean) / sum(c2^2)
f3_num <- (12* c3 %*% y_group_mean) / sum(c3^2)
f4_num <- (12* c4 %*% y_group_mean) / sum(c4^2)
f5_num <- (12* c5 %*% y_group_mean) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num / sigmasq.hat
f4 <- f4_num / sigmasq.hat
f5 <- f5_num / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 %*% y_group_mean)^2)) / sum(c1^2)
f2_num <- (12* sum((c2 %*% y_group_mean)^2)) / sum(c2^2)
f3_num <- (12* sum((c3 %*% y_group_mean)^2)) / sum(c3^2)
f4_num <- (12* sum((c4 %*% y_group_mean)^2)) / sum(c4^2)
f5_num <- (12* sum((c5 %*% y_group_mean)^2)) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num / sigmasq.hat
f4 <- f4_num / sigmasq.hat
f5 <- f5_num / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c5 %*% y_group_mean
c5 * y_group_mean
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 * y_group_mean)^2)) / sum(c1^2)
f2_num <- (12* sum((c2 * y_group_mean)^2)) / sum(c2^2)
f3_num <- (12* sum((c3 * y_group_mean)^2)) / sum(c3^2)
f4_num <- (12* sum((c4 * y_group_mean)^2)) / sum(c4^2)
f5_num <- (12* sum((c5 * y_group_mean)^2)) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num / sigmasq.hat
f4 <- f4_num / sigmasq.hat
f5 <- f5_num / sigmasq.hat
c5 * y_group_mean
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
(c5 * y_group_mean)^2
sum((c5 * y_group_mean)^2)
sum((c5 * y_group_mean)^2) /sum(c5^2)
12*sum((c5 * y_group_mean)^2) /sum(c5^2)
12*sum((c5 * y_group_mean)^2) /sum(c5^2) sigmasq.hat
12*sum((c5 * y_group_mean)^2) /sigmasq.hat
sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 * y_group_mean)^2)) / sum(c1^2)
f2_num <- (12* sum((c2 * y_group_mean)^2)) / sum(c2^2)
f3_num <- (12* sum((c3 * y_group_mean)^2)) / sum(c3^2)
f4_num <- (12* sum((c4 * y_group_mean)^2)) / sum(c4^2)
f5_num <- (12* sum((c5 * y_group_mean)^2)) / sum(c5^2)
f1 <- f1_num # / sigmasq.hat
f2 <- f2_num # / sigmasq.hat
f3 <- f3_num # / sigmasq.hat
f4 <- f4_num # / sigmasq.hat
f5 <- f5_num # / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 * y_group_mean))^2) / sum(c1^2)
f2_num <- (12* sum((c2 * y_group_mean))^2) / sum(c2^2)
f3_num <- (12* sum((c3 * y_group_mean))^2) / sum(c3^2)
f4_num <- (12* sum((c4 * y_group_mean))^2) / sum(c4^2)
f5_num <- (12* sum((c5 * y_group_mean))^2) / sum(c5^2)
f1 <- f1_num # / sigmasq.hat
f2 <- f2_num # / sigmasq.hat
f3 <- f3_num # / sigmasq.hat
f4 <- f4_num # / sigmasq.hat
f5 <- f5_num # / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 * y_group_mean))^2) / sum(c1^2)
f2_num <- (12* sum((c2 * y_group_mean))^2) / sum(c2^2)
f3_num <- (12* sum((c3 * y_group_mean))^2) / sum(c3^2)
f4_num <- (12* sum((c4 * y_group_mean))^2) / sum(c4^2)
f5_num <- (12* sum((c5 * y_group_mean))^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num # / sigmasq.hat
f3 <- f3_num # / sigmasq.hat
f4 <- f4_num # / sigmasq.hat
f5 <- f5_num # / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 * y_group_mean))^2) / sum(c1^2)
f2_num <- (12* sum((c2 * y_group_mean))^2) / sum(c2^2)
f3_num <- (12* sum((c3 * y_group_mean))^2) / sum(c3^2)
f4_num <- (12* sum((c4 * y_group_mean))^2) / sum(c4^2)
f5_num <- (12* sum((c5 * y_group_mean))^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num # / sigmasq.hat
f4 <- f4_num # / sigmasq.hat
f5 <- f5_num # / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum((c1 * y_group_mean))^2) / sum(c1^2)
f2_num <- (12* sum((c2 * y_group_mean))^2) / sum(c2^2)
f3_num <- (12* sum((c3 * y_group_mean))^2) / sum(c3^2)
f4_num <- (12* sum(c4 * y_group_mean)^2) / sum(c4^2)
f5_num <- (12* sum(c5 * y_group_mean)^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num # / sigmasq.hat
f4 <- f4_num # / sigmasq.hat
f5 <- f5_num # / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum(c1 * y_group_mean)^2) / sum(c1^2)
f2_num <- (12* sum(c2 * y_group_mean)^2) / sum(c2^2)
f3_num <- (12* sum(c3 * y_group_mean)^2) / sum(c3^2)
f4_num <- (12* sum(c4 * y_group_mean)^2) / sum(c4^2)
f5_num <- (12* sum(c5 * y_group_mean)^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num # / sigmasq.hat
f4 <- f4_num # / sigmasq.hat
f5 <- f5_num # / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum(c1 * y_group_mean)^2) / sum(c1^2)
f2_num <- (12* sum(c2 * y_group_mean)^2) / sum(c2^2)
f3_num <- (12* sum(c3 * y_group_mean)^2) / sum(c3^2)
f4_num <- (12* sum(c4 * y_group_mean)^2) / sum(c4^2)
f5_num <- (12* sum(c5 * y_group_mean)^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num / sigmasq.hat
f4 <- f4_num / sigmasq.hat
f5 <- f5_num / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
library(MASS)
head(Rubber)
plot(Rubber$hard, Rubber$loss, xlab="hardness (Shore units)",
ylab="abrasion loss (gm/hr)")
plot(Rubber$tens, Rubber$loss, xlab="tensile strength (kg/m^2)",
ylab="abrasion loss (gm/hr)")
n <- nrow(Rubber)
m <- 2
S <- cov(cbind(Rubber$hard, Rubber$tens))*(n-1)/n
fit <- lm(loss ~ ., data=Rubber)
beta.hat <- fit$coefficients[2:3]
sigmasq.hat <- sum(fit$residuals^2)/(n-m-1)
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
f1_num <- (12* sum(c1 * y_group_mean)^2) / sum(c1^2)
f2_num <- (12* sum(c2 * y_group_mean)^2) / sum(c2^2)
f3_num <- (12* sum(c3 * y_group_mean)^2) / sum(c3^2)
f4_num <- (12* sum(c4 * y_group_mean)^2) / sum(c4^2)
f5_num <- (12* sum(c5 * y_group_mean)^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat
f2 <- f2_num / sigmasq.hat
f3 <- f3_num / sigmasq.hat
f4 <- f4_num / sigmasq.hat
f5 <- f5_num / sigmasq.hat
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
f.stat <- (n * t(beta.hat - c(1,1)) %*% S %*% (beta.hat - c(1,1)) / m) / sigmasq.hat
f.stat
1 - pf(f.stat, m, n-m-1)
#help("InsectSprays")
y <- InsectSprays$count
x <- InsectSprays$spray
k <- length(levels(x))
boxplot(y ~ x, col=2:(k+1), xlab="insecticide used", ylab="number of insects",
main="Effectiveness of insecticides")
boxplot(I(sqrt(y)) ~ x, col=2:(k+1), xlab="insecticide used",
ylab="square root of number of insects", main="Effectiveness of insecticides")
sapply(split(sqrt(y), x), sd)
y <- sqrt(y)
ymean <- mean(y)
y_group_mean <- sapply(split(y, x), mean)
SS_reg <- sum(12*(y_group_mean - ymean)^2)
sum_in_res <- 0
for (i in c(1:6)){
sum_in_res <- sum_in_res + sum((split(y, x)[i][[1]] - y_group_mean[i])^2)
}
SS_res <- sum_in_res
n <- length(y)
f <- (SS_reg*(n-k)) / (SS_res * (k-1))
1 - pf(f, k-1, n-k)
ymean <- mean(y)
y_group_mean <- sapply(split(y, x), mean)
SS_reg <- sum(12*(y_group_mean - ymean)^2)
sum_in_res <- 0
for (i in c(1:6)){
sum_in_res <- sum_in_res + sum((split(y, x)[i][[1]] - y_group_mean[i])^2)
}
SS_res <- sum_in_res
n <- length(y)
f <- (SS_reg*(n-k)) / (SS_res * (k-1))
1 - pf(f, k-1, n-k)
f
ymean <- mean(y)
y_group_mean <- sapply(split(y, x), mean)
SS_reg <- sum(12*(y_group_mean - ymean)^2)
sum_in_res <- 0
for (i in c(1:6)){
sum_in_res <- sum_in_res + sum((split(y, x)[i][[1]] - y_group_mean[i])^2)
}
SS_res <- sum_in_res
n <- length(y)
f <- (SS_reg*(n-k)) / (SS_res * (k-1))
f
1 - pf(f, k-1, n-k)
summary(aov(y ~ x))
summary(aov(y ~ x))%resid()
summary(aov(y ~ x))%resid
summary(aov(y ~ x))%residual
summary(aov(y ~ x))%residuals
summary(aov(y ~ x))$residuals
summary(aov(y ~ x))$resid
summary(aov(y ~ x))$Residual
summary(aov(y ~ x))$Residuals
aov(y ~ x)$Residuals
aov(y ~ x)
aov(y ~ x).resid
aov(y ~ x)$residual
aov(y ~ x)$residuals
aov(y ~ x)$residuals
sum((aov(y ~ x)$residuals)^2)
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
sigmasq.hat.anova <- sum(fit$residuals^2)/(n-m-1)
f1_num <- (12* sum(c1 * y_group_mean)^2) / sum(c1^2)
f2_num <- (12* sum(c2 * y_group_mean)^2) / sum(c2^2)
f3_num <- (12* sum(c3 * y_group_mean)^2) / sum(c3^2)
f4_num <- (12* sum(c4 * y_group_mean)^2) / sum(c4^2)
f5_num <- (12* sum(c5 * y_group_mean)^2) / sum(c5^2)
f1 <- f1_num / sum((aov(y ~ x)$residuals)^2)
f2 <- f2_num / sum((aov(y ~ x)$residuals)^2)
f3 <- f3_num /sum((aov(y ~ x)$residuals)^2)
f4 <- f4_num / sum((aov(y ~ x)$residuals)^2)
f5 <- f5_num / sum((aov(y ~ x)$residuals)^2)
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
sum((aov(y ~ x)$residuals)^2)
(aov(y ~ x)$residuals)^2
SS_res/(n-k)
c1 <- c(1, -1, 0, 0, 0, 0)
c2 <- c(.5, .5, 0, 0, 0, -1)
c3 <- c(0, 0, 1, -1, 0, 0)
c4 <- c(0, 0, 0.5, 0.5, -1, 0)
c5 <- c(1, 1, -1, -1, -1, 1)
# Numerators of contrast f-statistics can be calculated using
# a formula from Sec 2.2.2 of the text.
sigmasq.hat.anova <-  SS_res/(n-k)
f1_num <- (12* sum(c1 * y_group_mean)^2) / sum(c1^2)
f2_num <- (12* sum(c2 * y_group_mean)^2) / sum(c2^2)
f3_num <- (12* sum(c3 * y_group_mean)^2) / sum(c3^2)
f4_num <- (12* sum(c4 * y_group_mean)^2) / sum(c4^2)
f5_num <- (12* sum(c5 * y_group_mean)^2) / sum(c5^2)
f1 <- f1_num / sigmasq.hat.anova
f2 <- f2_num / sigmasq.hat.anova
f3 <- f3_num / sigmasq.hat.anova
f4 <- f4_num / sigmasq.hat.anova
f5 <- f5_num / sigmasq.hat.anova
# uncomment to compare:
(f1+f2+f3+f4+f5)/5
f
(c(75, 216)-means) %*% S
beta.hat[2,3] %*% c(75, 216)
beta.hat[2,3]
beta.hat[2,3]
library(MASS)
head(Rubber)
plot(Rubber$hard, Rubber$loss, xlab="hardness (Shore units)",
ylab="abrasion loss (gm/hr)")
plot(Rubber$tens, Rubber$loss, xlab="tensile strength (kg/m^2)",
ylab="abrasion loss (gm/hr)")
n <- nrow(Rubber)
m <- 2
S <- cov(cbind(Rubber$hard, Rubber$tens))*(n-1)/n
fit <- lm(loss ~ ., data=Rubber)
beta.hat <- fit$coefficients[2:3]
sigmasq.hat <- sum(fit$residuals^2)/(n-m-1)
plot(Rubber$hard, Rubber$tens)
means <- c(mean(Rubber$hard), mean(Rubber$tens))
S <- cov(Rubber[, 2:3])*(n-1)/n
library(mixtools)
ellipse(means, S, alpha=.75, col="blue")
ellipse(means, S, alpha=.5, col="blue", lty=2)
ellipse(means, S, alpha=.25, col="blue", lty=3)
points(means[1], means[2], col="blue", pch="*", cex=2)
points(75, 216, col="red", pch="*", cex=2)
points(57, 200, col="green", pch="*", cex=2)
beta.hat[2,3]
beta.hat[2,3]
beta.hat[2:3]
beta.hat  %*% c(75, 216)
a <- qt(.95, n-m-1)
mean(Rubber$loss) + beta.hat %*% c(75, 216)
fit$coefficients[1] + beta.hat %*% c(75, 216)
a <- qt(.95, n-m-1)
pred_Y_1 <- fit$coefficients[1] + beta.hat %*% c(75, 216)
stats_1 <- a * sqrt(sigmasq.hat * (1+ (1/n)*(1+md_1))))
a <- qt(.95, n-m-1)
pred_Y_1 <- fit$coefficients[1] + beta.hat %*% c(75, 216)
stats_1 <- a * sqrt(sigmasq.hat * (1+ (1/n)*(1+md_1)))
pred_inverval_90_1 <- c(pred_Y_1-stats_1,pred_Y_1+stats_1)
pred_inverval_90_1
pred_Y_2 <- fit$coefficients[1] + beta.hat %*% c(57, 200)
stats_2 <- a * sqrt(sigmasq.hat * (1+ (1/n)*(1+md_2)))
pred_inverval_90_2 <- c(pred_Y_2-stats_2,pred_Y_2+stats_2)
pred_inverval_90_2
a <- qt(.95, n-m-1)
pred_Y_1 <- fit$coefficients[1] + beta.hat %*% c(75, 216)
stats_1 <- a * sqrt(sigmasq.hat * (1+ (1/n)*(1+md_1)))
pred_inverval_90_1 <- c(pred_Y_1-stats_1, pred_Y_1+stats_1)
pred_inverval_90_1
pred_Y_2 <- fit$coefficients[1] + beta.hat %*% c(57, 200)
stats_2 <- a * sqrt(sigmasq.hat * (1+ (1/n)*(1+md_2)))
pred_inverval_90_2 <- c(pred_Y_2-stats_2, pred_Y_2+stats_2)
pred_inverval_90_2
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_condaenv("bis620", required = TRUE)
import("pandas")
# use_python("/Users/emilyshao/Library/r-miniconda/envs/bis620/bin/python")
# py_install("plotnine")
# py_install("pandas")
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
py_mat
py_mat[1]
py_mat[[2]]
py_mat + 1
py_mat * 1
py_mat %*% py_mat
py_mat - 1
py_mat / 1
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
numpy_matrix <- setClass(Class = "numpy_matrix",
slots=list(x="matrix")
)
m1 <- numpy_matrix(x = py$mm)
reticulate::py_call(mm = np.matrix([1,2],[3,4]))
reticulate::py(reticulate::py)
reticulate::py(mm = np.matrix([1,2],[3,4]))
reticulate::py_call(import numpy as np)
reticulate::use_python(mm = np.matrix([1,2],[3,4]))
reticulate::use_python(mm = np.matrix([[1,2],[3,4]]))
reticulate::use_python(mm = np.matrix([[1,2],[3,4]]))
reticulate:::repl_python(mm = np.matrix([[1,2],[3,4]]))
reticulate:::repl_python(import numpy as np
mm = np.matrix([[1,2],[3,4]]))
reticulate:::repl_python(import numpy as np)
reticulate::repl_python(import numpy as np)
reticulate:::repl_python()
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
numpy_matrix <- setClass(Class = "numpy_matrix",
slots=list(x="matrix")
)
m1 <- numpy_matrix(x = py$mm)
m1
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=(pymat = numpy.ndarray, np = np)
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=(pymat = numpy.ndarray, np = np))
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=list(pymat = numpy.ndarray, np = np))
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=list(x = numpy.ndarray, np = np))
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=list(x = numpy.array, np = np))
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=list(x = np.array, np = np))
np <- import("numpy")
py_mat <- np$array(list(1:3,4:6,7:9))
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
slots=list(x = "matrix"))
m1 <- bis620_pymatrix(x = py$mm)
m1
git
git init
git config
git remote add origin https://github.com/mingzheshao/bis620.git
setwd("~/Desktop/bis620")
check()
library(devtools)
check()
pkgbuild::check_build_tools(debug = TRUE)
check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
check()
